<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Waste Management Map</title>
    
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-custom/dist/leaflet-control-custom.css" />

    <!-- Custom styles for the map -->
    <style>
        body {
            padding-top: 20px;
            font-family: Arial, sans-serif;
        }

        #map {
            height: 500px;
            width: 80%;
            margin: 0 auto;
            position: relative;
        }

        .leaflet-control-custom {
            background: white;
            border: 2px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.3);
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            text-align: center;
            position: absolute;
            z-index: 1000;
        }

        .leaflet-control-custom button {
            border: none;
            background: none;
            font-size: 16px;
            margin: 5px;
        }

        .recenter-btn {
            bottom: 10px;
            left: 10px;
            padding: 10px 15px;
        }

        .compass-controls {
            top: 10px;
            right: 10px;
            padding: 10px 15px;
        }

        .info-labels {
            text-align: center;
            margin-top: 10px;
        }

        .info-labels span {
            display: inline-block;
            width: 60px;
            height: 20px;
            margin: 0 5px;
            border-radius: 3px;
            color: white;
            line-height: 20px;
            text-align: center;
        }

        .full {
            background-color: red;
        }

        .not-full {
            background-color: green;
        }
    </style>
</head>
<body>

    <h2>Waste Management Map - 200m Radius with Random Dustbins</h2>

    <!-- Map Container -->
    <div id="map"></div>

    <!-- Information Labels -->
    <div class="info-labels">
        <span class="full">Full Dustbin</span>
        <span class="not-full">Not Full Dustbin</span>
    </div>

    <!-- Leaflet JavaScript -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-custom/dist/leaflet-control-custom.js"></script>

    <script>
        // Initialize the map
        var map = L.map('map').setView([13.0827, 80.2707], 16); // Centered on Chennai

        // Add OpenStreetMap tiles
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 18,
            attribution: 'Â© OpenStreetMap'
        }).addTo(map);

        // Define the center point and 200m radius circle
        var centerLatLng = [13.0827, 80.2707]; // Chennai center coordinates
        var radius = 200; // 200 meters radius
        var originalCenter = L.latLng(centerLatLng);

        // Draw a circle to represent the 200-meter radius
        var circle = L.circle(centerLatLng, {
            color: '#4caf50',
            fillColor: '#4caf50',
            fillOpacity: 0.2,
            radius: radius
        }).addTo(map);

        // Function to convert degrees to radians
        function toRadians(degrees) {
            return degrees * Math.PI / 180;
        }

        const fs = require('fs');
        const filePath = 'C:\Users\DELL\OneDrive\Documents\GitHub\waste_management_system\results.txt';  // Replace with your actual file path



        // Function to calculate new coordinates given a center point, distance, and bearing
        function getNewCoordinates(center, distance, angle) {
            const earthRadius = 6371000; // Radius of Earth in meters
            const lat1 = toRadians(center[0]);
            const lon1 = toRadians(center[1]);
            const bearing = toRadians(angle);

            const lat2 = Math.asin(Math.sin(lat1) * Math.cos(distance / earthRadius) +
                Math.cos(lat1) * Math.sin(distance / earthRadius) * Math.cos(bearing));

            const lon2 = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(distance / earthRadius) * Math.cos(lat1),
                Math.cos(distance / earthRadius) - Math.sin(lat1) * Math.sin(lat2));

            return [lat2 * 180 / Math.PI, lon2 * 180 / Math.PI];
        }

        // Function to place random dustbins across the entire circle
        function placeRandomDustbins() {

            const totalRadius = 200; // Total radius (200 meters)
            const minInterval = 30.48; // Minimum distance (100 feet)
            const maxInterval = 182.88; // Maximum distance (600 feet)
            const dustbins = [];
            getIntegerArrayFromFile(filePath).then(integerArray => {
                alert(integerArray);
            }).catch(err => {
                console.error('Error:', err);
            });

            // Place dustbins randomly within the 200m radius
            for (let i = 0; i < 50; i++) { // Increase number of bins to ensure more widespread placement
                const randomDistance = Math.random() * (maxInterval - minInterval) + minInterval;
                const randomAngle = Math.random() * 360; // Random angle for each bin
                const binLocation = getNewCoordinates(centerLatLng, randomDistance, randomAngle);
                const isFull = Math.random() < 0.5; // Randomly determine if dustbin is full

                dustbins.push(binLocation);

                // Place a marker for each dustbin
                L.marker(binLocation, {
                    icon: L.divIcon({
                        className: 'dustbin-icon',
                        html: `<div style="background-color: ${isFull ? 'red' : 'green'}; width: 10px; height: 10px; border-radius: 50%;"></div>`,
                        iconSize: [20, 20]
                    })
                }).addTo(map).bindPopup(isFull ? "Full Dustbin" : "Not Full Dustbin");
            }
        }

        // Function to place a moving person marker
        function placeMovingPerson() {
            const personRadius = 100; // Smaller radius for person
            const randomDistance = Math.random() * personRadius;
            const randomAngle = Math.random() * 360;
            const personLocation = getNewCoordinates(centerLatLng, randomDistance, randomAngle);

            // Place a marker for the person
            L.marker(personLocation, {
                icon: L.divIcon({
                    className: 'person-icon',
                    html: `<div style="background-color: blue; width: 15px; height: 15px; border-radius: 50%;"></div>`,
                    iconSize: [20, 20]
                })
            }).addTo(map).bindPopup("Person");
        }

        async function getIntegerArrayFromFile(filePath) {
            try {
                // Read the file content
                const data = await fs.readFile(filePath, 'utf8');
                
                // Strip any extra whitespace or newlines and convert to an array of integers
                const integerArray = data.trim().split('').map(char => {
                    // Convert each character to an integer
                    const number = parseInt(char, 10);
                    if (!isNaN(number)) {
                        return number;
                    } else {
                        console.error(`Non-digit character found: ${char}`);
                        return null;
                    }
                }).filter(num => num !== null);  // Filter out any null values in case of errors

                return integerArray;
            } catch (err) {
                console.error('Error reading file:', err);
                return [];  // Return an empty array if there is an error
            }
        }

        // Call functions to place dustbins and person
        placeRandomDustbins();
        placeMovingPerson();

        // Add recenter button
        L.control.custom({
            position: 'bottomleft',
            content: '<button class="leaflet-control-custom recenter-btn" onclick="map.setView(originalCenter, 16)">Recenter</button>',
            classes: 'leaflet-control-custom recenter-btn',
            style: {
                background: 'white',
                color: 'black',
                border: '2px solid #ccc',
                borderRadius: '5px',
                boxShadow: '0 2px 6px rgba(0,0,0,0.3)',
                margin: '10px',
                padding: '10px 15px',
                cursor: 'pointer'
            }
        }).addTo(map);

        // Add navigation buttons
        L.control.custom({
            position: 'topright',
            content: `
                <button class="leaflet-control-custom compass-controls" onclick="map.panBy([0, -100])">North</button>
                <button class="leaflet-control-custom compass-controls" onclick="map.panBy([100, 0])">East</button>
                <button class="leaflet-control-custom compass-controls" onclick="map.panBy([-100, 0])">West</button>
                <button class="leaflet-control-custom compass-controls" onclick="map.panBy([0, 100])">South</button>
            `,
            classes: 'leaflet-control-custom compass-controls',
            style: {
                background: 'white',
                color: 'black',
                border: '2px solid #ccc',
                borderRadius: '5px',
                boxShadow: '0 2px 6px rgba(0,0,0,0.3)',
                margin: '10px',
                padding: '10px 15px',
                cursor: 'pointer'
            }
        }).addTo(map);

    </script>
</body
